package name.wadewalker.vbotutorial;

import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;
import java.nio.DoubleBuffer;

import javax.swing.*;
//import javax.media.opengl.GL;
import javax.media.opengl.GL2;
import javax.media.opengl.GLAutoDrawable;
import javax.media.opengl.GLEventListener;
import javax.media.opengl.GLException;
import javax.media.opengl.awt.GLCanvas;
import javax.media.opengl.glu.GLU;
import javax.media.opengl.glu.GLUquadric;
//import javax.media.opengl.glu.GLUquadric;

//import org.omg.CORBA.portable.InputStream;

import com.jogamp.opengl.util.FPSAnimator;
import com.jogamp.opengl.util.texture.Texture;
import com.jogamp.opengl.util.texture.TextureCoords;
import com.jogamp.opengl.util.texture.TextureIO;

import static javax.media.opengl.GL.*; // GL constants
import static javax.media.opengl.GL2.*; // GL2 constants
import static javax.media.opengl.GL2ES1.GL_PERSPECTIVE_CORRECTION_HINT;
import static javax.media.opengl.fixedfunc.GLLightingFunc.GL_SMOOTH;
import static javax.media.opengl.fixedfunc.GLMatrixFunc.GL_MODELVIEW;
import static javax.media.opengl.fixedfunc.GLMatrixFunc.GL_PROJECTION;

import java.util.ArrayList;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

public class Main extends GLCanvas implements GLEventListener, KeyListener,
        MouseListener, MouseMotionListener {

    public static String TITLE = "MegaMan";
    public static final int CANVAS_WIDTH = 640; // width of the drawable
    public static final int CANVAS_HEIGHT = 480; // height of the drawable
    public static final int FPS = 15; // animator's target frames per second
    public static final String QUALITY = "high"; //"low" for low, "high" for high, anything else for default

    /*
     * public static void main(String[] args) { // Run the GUI codes in the
     * event-dispatching thread for thread safety SwingUtilities.invokeLater(new
     * Runnable() {
     * 
     * @Override public void run() { // Create the OpenGL rendering canvas final
     * GLCanvas canvas = new Main(); canvas.setPreferredSize(new
     * Dimension(CANVAS_WIDTH, CANVAS_HEIGHT));
     * 
     * // Create a animator that drives canvas' display() at the // specified
     * FPS. final FPSAnimator animator = new FPSAnimator(canvas, FPS, true);
     * 
     * // Create the top-level container final JFrame frame = new JFrame(); //
     * Swing's JFrame or AWT's // Frame frame.getContentPane().add(canvas);
     * frame.addWindowListener(new WindowAdapter() {
     * 
     * @Override public void windowClosing(WindowEvent e) { // Use a dedicate
     * thread to run the stop() to ensure // that the // animator stops before
     * program exits. new Thread() {
     * 
     * @Override public void run() { if (animator.isStarted()) animator.stop();
     * System.exit(0); } }.start(); } }); frame.setTitle(TITLE); frame.pack();
     * frame.setVisible(true); animator.start(); // start the animation loop }
     * }); }
     */

    public static GLU glu; // for the GL Utility

    public static float torsoRad = .3f;
    public static float torsoH = .8f;
    public static float headRad = .5f;
    public static float headOffset = (float) Math.sqrt( headRad * headRad
            - torsoRad * torsoRad );
    public static float limbRad = .1f;
    public static float thighLen = .6f;
    public static float calfLen = .6f;
    public static float shoulderH = .6f;// distance from waist to shoulders
    public static float upperArmLen = .4f;
    public static float forearmLen = .6f;
    public static float elbowToBlaster = .25f;
    public static float blasterRad1 = .15f;
    public static float blasterRad2 = .09f;
    public static float blasterLen1 = .35f;
    public static float blasterLen2 = .1f;
    public static float fistRad = .15f;

    public static float headLRAngle = 0.0f;
    public static float headUDAngle = 0.0f;
    public static float LstepAngle = 0.0f;
    public static float RstepAngle = 0.0f;
    public static float LkneeAngle = 0.0f;
    public static float RkneeAngle = 0.0f;
    public static float LarmAngle = 0.0f;
    public static float RarmAngle = 0.0f;
    public static float LelbowAngle = 0.0f;
    public static float RelbowAngle = 0.0f;
    public static float LelbowAngle2 = 15.0f;
    public static float RelbowAngle2 = 15.0f;

    public static float stepSpeed = 12f;
    public static float kneeSpeed = -12f;
    public static float armSpeed = 12f;
    public static float elbowSpeed = -12f;
    public static float bulletSpeed = 0.2f;
    public static float moveSpeed = .25f;
    public static float rotateSpeed = 5f;
    public static float jumpSpeed = 12f;

    public static float lowerBound = (float) -(Math.cos( Math.PI * 5 / 180 )
            * thighLen + calfLen);
    public static float upperBound = 10;
    public static float leftBound = -20;
    public static float rightBound = 20;
    public static float innerBound = -20;
    public static float outerBound = 20;
    public static Texture floorTexture = null;
    public static float fTextureTop, fTextureBottom, fTextureLeft,
            fTextureRight;

    public static boolean walking = false;
    public static int walkingDir;
    public static int jumpingDir;
    public static final int FORWARDS = 1;
    public static final int BACKWARDS = -1;
    public static boolean shooting = false;
    public static long shootStartTime = 0;
    public static float rotatedAngle = 0f;
    public static boolean jumping = false;
    public static float jumpDist = 0f;
    public static float movedX = 0f;
    public static float movedZ = 0f;
    public static boolean invincible = false;
    public static boolean disappeared = false;
    public static long hitTime = 0;
    

    public static ArrayList<Bullet> bullets = new ArrayList<Bullet>();
    public static ArrayList<Enemy> enemies = new ArrayList<Enemy>();

    private Camera cam;
    private int MouseX, MouseY;
    
    public static int quality;
    public static int sphereQuality;

    public Main() {
        this.addGLEventListener( this );
        this.addKeyListener( this );
        this.addMouseListener( this );
        this.addMouseMotionListener( this );
    }

    public void init( GLAutoDrawable drawable ) {
        if(QUALITY.equals( "high" ))
            quality = 10;
        else if(QUALITY.equals( "low" ))
            quality = 5;
        else if(QUALITY.equals( "creepy" ))
            quality = 1;
        else
            quality = 7;
        
        sphereQuality = quality + 6;
        
        GL2 gl = drawable.getGL().getGL2(); // get the OpenGL graphics context
        glu = new GLU(); // get GL Utilities
        gl.glClearColor( 0.0f, 0.0f, 0.0f, 0.0f ); // set background (clear)
                                                   // color
        gl.glClearDepth( 1.0f ); // set clear depth value to farthest
        gl.glEnable( GL_DEPTH_TEST ); // enables depth testing
        gl.glDepthFunc( GL_LEQUAL ); // the type of depth test to do
        gl.glHint( GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST ); // best
                                                                // perspective
                                                                // correction
        gl.glShadeModel( GL_SMOOTH ); // blends colors nicely, and smoothes out
                                      // lighting

        try {

            floorTexture = TextureIO.newTexture( new File( "floor.png" ), true );

            gl.glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR );
            gl.glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR );
            TextureCoords fTextureCoords = floorTexture.getImageTexCoords();
            fTextureTop = fTextureCoords.top();
            fTextureBottom = fTextureCoords.bottom();
            fTextureLeft = fTextureCoords.left();
            fTextureRight = fTextureCoords.right();
        } catch( GLException e ) {
            e.printStackTrace();
        } catch( IOException e ) {
            e.printStackTrace();
        }

        initEnemies();
    }

    public void reshape( GLAutoDrawable drawable, int x, int y, int width,
            int height ) {
        GL2 gl = drawable.getGL().getGL2(); // get the OpenGL 2 graphics context

        if( height == 0 )
            height = 1; // prevent divide by zero
        float aspect = (float) width / height;
        cam = new Camera( glu, drawable, 70, aspect, 0.3f, 1000 );
        // cam.setRX(30f);
        for( int i = 0; i < 10; i++ )
            cam.moveBack();

        // Set the view port (display area) to cover the entire window
        gl.glViewport( 0, 0, width, height );

        // Setup perspective projection, with aspect ratio matches viewport
        gl.glMatrixMode( GL_PROJECTION ); // choose projection matrix
        gl.glLoadIdentity(); // reset projection matrix
        glu.gluPerspective( 45.0, aspect, 0.1, 100.0 ); // fovy, aspect, zNear,
                                                        // zFar

        // Enable the model-view transform
        gl.glMatrixMode( GL_MODELVIEW );
        gl.glLoadIdentity(); // reset

    }

    public void display( GLAutoDrawable drawable ) {
        GL2 gl = drawable.getGL().getGL2(); // get the OpenGL 2 graphics context
        gl.glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT ); // clear color
                                                                 // and depth
                                                                 // buffers
        gl.glLoadIdentity();

        cam.useView();

        if( !disappeared ) {
            drawModel( drawable );
        }

        drawEnvironment( drawable );

        if( walking && !invincible )
            walk();

        if( shooting )
            shoot();
        
        if( jumping )
            jump();

        if( invincible )
            moveBack();

        for( int i = 0; i < bullets.size(); i++ ) {
            bullets.get( i ).updateBullets( drawable );
        }

        checkHits();
        checkRunIntoEnemy();
    }

    public void dispose( GLAutoDrawable drawable ) {
    }

    public static void drawCylinder( GLAutoDrawable drawable, float rad, float h ) {
        GL2 gl = drawable.getGL().getGL2();
        // gl.glEnable(GL_LINE_SMOOTH);
        // gl.glLineWidth(0.2f);

        for( float i = 0; i < 2 * Math.PI; i += Math.PI / quality ) {
            gl.glBegin( GL_QUADS );
            gl.glVertex3d( Math.sin( i ) * rad, 0, Math.cos( i ) * rad );
            gl.glVertex3d( Math.sin( i ) * rad, h, Math.cos( i ) * rad );
            i += Math.PI / quality;
            gl.glVertex3d( Math.sin( i ) * rad, h, Math.cos( i ) * rad );
            gl.glVertex3d( Math.sin( i ) * rad, 0, Math.cos( i ) * rad );
            i -= Math.PI / quality;
            gl.glVertex3d( Math.sin( i ) * rad, 0, Math.cos( i ) * rad );
            gl.glEnd();
        }

        gl.glBegin( GL_POLYGON );
        for( float i = 0; i <= 2 * Math.PI; i += Math.PI / quality ) {
            gl.glVertex3d( Math.sin( i ) * rad, 0, Math.cos( i ) * rad );
        }
        gl.glEnd();

        gl.glBegin( GL_POLYGON );
        for( float i = 0; i <= 2 * Math.PI; i += Math.PI / quality ) {
            gl.glVertex3d( Math.sin( i ) * rad, h, Math.cos( i ) * rad );
        }
        gl.glEnd();

        gl.glColor3f( 0.0f, 0.0f, 0.0f );

        gl.glBegin( GL_LINE_LOOP );
        for( float i = 0; i <= 2 * Math.PI; i += Math.PI / quality ) {
            gl.glVertex3d( Math.sin( i ) * rad, 0, Math.cos( i ) * rad );
        }
        gl.glEnd();

        gl.glBegin( GL_LINE_LOOP );
        for( float i = 0; i <= 2 * Math.PI; i += Math.PI / quality ) {
            gl.glVertex3d( Math.sin( i ) * rad, h, Math.cos( i ) * rad );
        }
        gl.glEnd();
    }

    public static void drawSphere( float rad, String text ) {

        Texture texture = null;
        try {
            texture = TextureIO.newTexture( new File( text ), true );
        } catch( IOException exc ) {
            exc.printStackTrace();
            System.exit( 1 );
        }

        texture.enable();
        texture.bind();

        GLUquadric quad = glu.gluNewQuadric();
        glu.gluQuadricDrawStyle( quad, GLU.GLU_FILL );
        glu.gluQuadricNormals( quad, GLU.GLU_FLAT );
        glu.gluQuadricOrientation( quad, GLU.GLU_OUTSIDE );
        glu.gluQuadricTexture( quad, true );
        glu.gluSphere( quad, rad, sphereQuality, sphereQuality );
        glu.gluDeleteQuadric( quad );

        texture.disable();
    }

    public static void drawSphere( float rad ) {

        GLUquadric quad = glu.gluNewQuadric();
        glu.gluQuadricDrawStyle( quad, GLU.GLU_FILL );
        glu.gluQuadricNormals( quad, GLU.GLU_FLAT );
        glu.gluQuadricOrientation( quad, GLU.GLU_OUTSIDE );
        glu.gluSphere( quad, rad, sphereQuality, sphereQuality );
        glu.gluDeleteQuadric( quad );

    }

    public static void drawInverseCylinder( GLAutoDrawable drawable,
            float rad1, float rad2, float h ) {
        GL2 gl = drawable.getGL().getGL2();
        // gl.glEnable(GL_LINE_SMOOTH);
        // gl.glLineWidth(0.2f);

        for( float i = 0; i < 2 * Math.PI; i += Math.PI / quality) {
            gl.glBegin( GL_QUADS );
            gl.glVertex3d( Math.sin( i ) * rad1, 0, Math.cos( i ) * rad1 );
            gl.glVertex3d( Math.sin( i ) * rad1, h, Math.cos( i ) * rad1 );
            i += Math.PI / quality;
            gl.glVertex3d( Math.sin( i ) * rad1, h, Math.cos( i ) * rad1 );
            gl.glVertex3d( Math.sin( i ) * rad1, 0, Math.cos( i ) * rad1 );
            i -= Math.PI / quality;
            gl.glVertex3d( Math.sin( i ) * rad1, 0, Math.cos( i ) * rad1 );
            gl.glEnd();
        }

        for( float i = 0; i < 2 * Math.PI; i += Math.PI / quality ) {
            gl.glBegin( GL_QUADS );
            gl.glVertex3d( Math.sin( i ) * rad2, 0, Math.cos( i ) * rad2 );
            gl.glVertex3d( Math.sin( i ) * rad2, h, Math.cos( i ) * rad2 );
            i += Math.PI / quality;
            gl.glVertex3d( Math.sin( i ) * rad2, h, Math.cos( i ) * rad2 );
            gl.glVertex3d( Math.sin( i ) * rad2, 0, Math.cos( i ) * rad2 );
            i -= Math.PI / quality;
            gl.glVertex3d( Math.sin( i ) * rad2, 0, Math.cos( i ) * rad2 );
            gl.glEnd();
        }

        for( float i = 0; i < 2 * Math.PI; i += Math.PI / quality ) {
            gl.glBegin( GL_QUADS );
            gl.glVertex3d( Math.sin( i ) * rad1, 0, Math.cos( i ) * rad1 );
            gl.glVertex3d( Math.sin( i ) * rad2, 0, Math.cos( i ) * rad2 );
            i += Math.PI / quality;
            gl.glVertex3d( Math.sin( i ) * rad2, 0, Math.cos( i ) * rad2 );
            gl.glVertex3d( Math.sin( i ) * rad1, 0, Math.cos( i ) * rad1 );
            i -= Math.PI / quality;
            gl.glVertex3d( Math.sin( i ) * rad1, 0, Math.cos( i ) * rad1 );
            gl.glEnd();
        }

        for( float i = 0; i < 2 * Math.PI; i += Math.PI / quality ) {
            gl.glBegin( GL_QUADS );
            gl.glVertex3d( Math.sin( i ) * rad1, h, Math.cos( i ) * rad1 );
            gl.glVertex3d( Math.sin( i ) * rad2, h, Math.cos( i ) * rad2 );
            i += Math.PI / quality;
            gl.glVertex3d( Math.sin( i ) * rad2, h, Math.cos( i ) * rad2 );
            gl.glVertex3d( Math.sin( i ) * rad1, h, Math.cos( i ) * rad1 );
            i -= Math.PI / quality;
            gl.glVertex3d( Math.sin( i ) * rad1, h, Math.cos( i ) * rad1 );
            gl.glEnd();
        }

        gl.glColor3f( 0.0f, 0.0f, 0.0f );

        gl.glBegin( GL_LINE_LOOP );
        for( float i = 0; i <= 2 * Math.PI; i += Math.PI / quality ) {
            gl.glVertex3d( Math.sin( i ) * rad1, 0, Math.cos( i ) * rad1 );
        }
        gl.glEnd();

        gl.glBegin( GL_LINE_LOOP );
        for( float i = 0; i <= 2 * Math.PI; i += Math.PI / quality ) {
            gl.glVertex3d( Math.sin( i ) * rad1, h, Math.cos( i ) * rad1 );
        }
        gl.glEnd();

        gl.glBegin( GL_LINE_LOOP );
        for( float i = 0; i <= 2 * Math.PI; i += Math.PI / quality ) {
            gl.glVertex3d( Math.sin( i ) * rad2, 0, Math.cos( i ) * rad2 );
        }
        gl.glEnd();

        gl.glBegin( GL_LINE_LOOP );
        for( float i = 0; i <= 2 * Math.PI; i += Math.PI / quality ) {
            gl.glVertex3d( Math.sin( i ) * rad2, h, Math.cos( i ) * rad2 );
        }
        gl.glEnd();
    }

    private static void drawModel( GLAutoDrawable drawable ) {
        GL2 gl = drawable.getGL().getGL2();

        gl.glPushMatrix();
        gl.glRotatef( rotatedAngle, 0.0f, 1.0f, 0.0f );
        gl.glTranslatef( 0.0f, jumpDist, 0.0f );

        // Torso
        gl.glColor3f( 0.0f, 1.0f, 1.0f );
        drawCylinder( drawable, torsoRad, torsoH );
        gl.glColor3f( 0.0f, 1.0f, 1.0f );

        // Head
        gl.glPushMatrix();
        gl.glTranslatef( 0.0f, torsoH + headOffset, 0.0f );
        gl.glColor3f( 1.0f, 1.0f, 1.0f );
        gl.glRotatef( 90f, -1.0f, 0.0f, 0.0f );
        gl.glRotatef( 180f, 0.0f, 1.0f, 0.0f );
        gl.glRotatef( headLRAngle, 0.0f, 0.0f, 1.0f );
        gl.glRotatef( headUDAngle, 1.0f, 0.0f, 0.0f );
        drawSphere( headRad, "mega.png" );
        gl.glPopMatrix();

        // Pelvis
        gl.glPushMatrix();
        gl.glColor3f( 0.0f, 0.0f, 1.0f );
        drawSphere( torsoRad - 0.01f );
        gl.glPopMatrix();

        // Legs
        gl.glPushMatrix();
        gl.glRotatef( 180f, 0.0f, 0.0f, 1.0f );

        // Left Leg
        gl.glPushMatrix();
        gl.glColor3f( 0.0f, 1.0f, 1.0f );
        gl.glTranslatef( torsoRad / -3.0f, 0.0f, 0.0f );
        gl.glRotatef( 5f, 0.0f, 0.0f, 1.0f );
        gl.glRotatef( LstepAngle, 1.0f, 0.0f, 0.0f );
        drawCylinder( drawable, limbRad, thighLen );
        gl.glColor3f( 0.0f, 1.0f, 1.0f );
        gl.glTranslatef( 0.0f, thighLen, 0.0f );
        drawSphere( limbRad + 0.005f );
        gl.glColor3f( 0.0f, 0.0f, 1.0f );
        gl.glRotatef( -5f, 0.0f, 0.0f, 1.0f );
        gl.glRotatef( LkneeAngle, 1.0f, 0.0f, 0.0f );
        drawCylinder( drawable, limbRad, calfLen );
        gl.glColor3f( 0.0f, 0.0f, 1.0f );
        gl.glPopMatrix();

        // Right Leg
        gl.glPushMatrix();
        gl.glColor3f( 0.0f, 1.0f, 1.0f );
        gl.glTranslatef( torsoRad / 3.0f, 0.0f, 0.0f );
        gl.glRotatef( -5f, 0.0f, 0.0f, 1.0f );
        gl.glRotatef( RstepAngle, 1.0f, 0.0f, 0.0f );
        drawCylinder( drawable, limbRad, thighLen );
        gl.glColor3f( 0.0f, 1.0f, 1.0f );
        gl.glTranslatef( 0.0f, thighLen, 0.0f );
        drawSphere( limbRad + 0.005f );
        gl.glColor3f( 0.0f, 0.0f, 1.0f );
        gl.glRotatef( 5f, 0.0f, 0.0f, 1.0f );
        gl.glRotatef( RkneeAngle, 1.0f, 0.0f, 0.0f );
        drawCylinder( drawable, limbRad, calfLen );
        gl.glColor3f( 0.0f, 0.0f, 1.0f );
        gl.glPopMatrix();

        gl.glPopMatrix();

        // Arms
        gl.glPushMatrix();
        gl.glTranslatef( 0.0f, shoulderH, 0.0f );

        // Blaster Arm
        gl.glPushMatrix();
        gl.glColor3f( 0.0f, 1.0f, 1.0f );
        gl.glTranslatef( -5.0f / 6.0f * torsoRad, 0.0f, 0.0f );
        gl.glRotatef( 135f, 0.0f, 0.0f, 1.0f );
        gl.glRotatef( RarmAngle, 1.0f, 0.0f, 0.0f );
        drawCylinder( drawable, limbRad, upperArmLen );
        gl.glColor3f( 0.0f, 1.0f, 1.0f );
        gl.glTranslatef( 0.0f, upperArmLen, 0.0f );
        drawSphere( limbRad + 0.005f );
        gl.glColor3f( 0.0f, 0.0f, 1.0f );
        gl.glRotatef( RelbowAngle2, 0.0f, 0.0f, 1.0f );
        gl.glRotatef( RelbowAngle, -1.0f, 0.0f, 0.0f );
        drawCylinder( drawable, limbRad, elbowToBlaster );
        gl.glColor3f( 0.0f, 0.0f, 1.0f );
        gl.glTranslatef( 0.0f, elbowToBlaster, 0.0f );
        drawCylinder( drawable, blasterRad1, blasterLen1 );
        gl.glColor3f( 0.0f, 0.0f, 1.0f );
        gl.glColor3f( 1.0f, 0.0f, 0.0f );
        drawCylinder( drawable, blasterRad2, blasterLen1 + 0.01f );
        gl.glColor3f( 1.0f, 0.0f, 0.0f );
        gl.glTranslatef( 0.0f, blasterLen1 + 0.001f, 0.0f );
        gl.glColor3f( 0.0f, 0.0f, 1.0f );
        drawInverseCylinder( drawable, limbRad, blasterRad2, blasterLen2 );
        gl.glColor3f( 0.0f, 0.0f, 1.0f );
        gl.glPopMatrix();

        // Fist Arm
        gl.glPushMatrix();
        gl.glColor3f( 0.0f, 1.0f, 1.0f );
        gl.glTranslatef( 5.0f / 6.0f * torsoRad, 0.0f, 0.0f );
        gl.glRotatef( 135f, 0.0f, 0.0f, -1.0f );
        gl.glRotatef( LarmAngle, 1.0f, 0.0f, 0.0f );
        drawCylinder( drawable, limbRad, upperArmLen );
        gl.glColor3f( 0.0f, 1.0f, 1.0f );
        gl.glTranslatef( 0.0f, upperArmLen, 0.0f );
        drawSphere( limbRad + .005f );
        gl.glColor3f( 0.0f, 0.0f, 1.0f );
        gl.glRotatef( LelbowAngle2, 0.0f, 0.0f, -1.0f );
        gl.glRotatef( LelbowAngle, -1.0f, 0.0f, 0.0f );
        drawCylinder( drawable, limbRad, forearmLen );
        gl.glColor3f( 0.0f, 0.0f, 1.0f );
        gl.glTranslatef( 0.0f, forearmLen, 0.0f );
        drawSphere( fistRad );
        gl.glPopMatrix();

        gl.glPopMatrix();

        gl.glPopMatrix();
    }

    private static void drawEnvironment( GLAutoDrawable drawable ) {
        GL2 gl = drawable.getGL().getGL2();

        floorTexture.enable();
        floorTexture.bind();
        gl.glColor3f( 0.0f, 0.0f, 1.0f );
        gl.glPushMatrix();

        gl.glTranslatef( -movedX, 0, -movedZ );

        gl.glBegin( GL_QUADS );

        gl.glTexCoord2f( fTextureRight, fTextureTop );
        gl.glVertex3f( rightBound, lowerBound, innerBound );
        gl.glTexCoord2f( fTextureLeft, fTextureTop );
        gl.glVertex3f( leftBound, lowerBound, innerBound );
        gl.glTexCoord2f( fTextureLeft, fTextureBottom );
        gl.glVertex3f( leftBound, lowerBound, outerBound );
        gl.glTexCoord2f( fTextureRight, fTextureBottom );
        gl.glVertex3f( rightBound, lowerBound, outerBound );

        gl.glEnd();
        floorTexture.disable();

        for( int i = 0; i < enemies.size(); i++ ) {
            enemies.get( i ).drawEnemy( drawable );
        }

        gl.glPopMatrix();
    }

    private static void walk() {
        if( RarmAngle == 90f ) {
            RelbowAngle2 = 15f;
            RarmAngle = 0f;
            shooting = false;
        }

        LkneeAngle += kneeSpeed;
        LstepAngle += stepSpeed;
        RkneeAngle += kneeSpeed;
        RstepAngle -= stepSpeed;
        LarmAngle += armSpeed;
        LelbowAngle += elbowSpeed;
        RarmAngle -= armSpeed;
        RelbowAngle += elbowSpeed;

        if( walkingDir == FORWARDS ) {
            movedX += (float) Math.sin( rotatedAngle * Math.PI / 180 )
                    * moveSpeed;
            movedZ += (float) Math.cos( rotatedAngle * Math.PI / 180 )
                    * moveSpeed;
        } else {
            movedX -= (float) Math.sin( rotatedAngle * Math.PI / 180 )
                    * moveSpeed;
            movedZ -= (float) Math.cos( rotatedAngle * Math.PI / 180 )
                    * moveSpeed;
        }

        if( LstepAngle > 60.0f || RstepAngle > 60.0f ) {
            stepSpeed = -1 * stepSpeed;
            kneeSpeed = -1 * kneeSpeed;
            armSpeed = -1 * armSpeed;
            elbowSpeed = -1 * elbowSpeed;
        }
        if( LstepAngle > -0.01f && LstepAngle < 0.01f ) {
            kneeSpeed = -1 * kneeSpeed;
            elbowSpeed = -1 * elbowSpeed;
            LstepAngle = 0.0f;
            RstepAngle = 0.0f;
            LkneeAngle = 0.0f;
            RkneeAngle = 0.0f;
            LarmAngle = 0.0f;
            RarmAngle = 0.0f;
            LelbowAngle = 0.0f;
            RelbowAngle = 0.0f;
            walking = false;
        }
    }
    
    private static void jump() {
        
    }

    private static void shoot() {
        RelbowAngle2 = 0f;
        RarmAngle = 90f;

        if( System.currentTimeMillis() - shootStartTime > 250 ) {
            shooting = false;
            RelbowAngle2 = 15f;
            RarmAngle = 0.0f;
        }
    }

    private static void initEnemies() {
        enemies.add( new Enemy( 1, 1, .5f, 5f ) );
        enemies.add( new Enemy( -4, 10, .5f, 5f ) );
        enemies.add( new Enemy( -2, -5, .5f, 5f ) );
        enemies.add( new Enemy( 6, -7, .5f, 5f ) );
        // enemies.add( new Enemy( 100, 100, .5f, 5f ) );
    }

    private static void checkHits() {
        float bulletX = 0;
        float bulletZ = 0;
        for( int i = 0; i < bullets.size(); i++ ) {
            for( int j = 0; j < enemies.size(); j++ ) {
                bulletX = bullets.get( i ).getStartX()
                        + (float) Math.sin( bullets.get( i ).getRotAngle()
                                * Math.PI / 180 ) * bullets.get( i ).getDist();
                bulletZ = bullets.get( i ).getStartZ()
                        + (float) Math.cos( bullets.get( i ).getRotAngle()
                                * Math.PI / 180 ) * bullets.get( i ).getDist();
                if( bulletX > rightBound || bulletX < leftBound
                        || bulletZ > outerBound || bulletZ < innerBound ) {
                    bullets.remove( i );
                    i--;
                    break;
                }
                if( Math.sqrt( Math.pow( enemies.get( j ).getXCoor() - bulletX,
                        2 )
                        + Math.pow( enemies.get( j ).getZCoor() - bulletZ, 2 ) ) <= blasterRad2
                        + enemies.get( j ).getRad() ) {
                    bullets.remove( i );
                    enemies.remove( j );
                    i--;
                    break;
                }
            }
        }
    }

    private static void checkRunIntoEnemy() {
        float distX = 0;
        float distZ = 0;
        for( int i = 0; i < enemies.size(); i++ ) {
            if( Math.sqrt( Math.pow( enemies.get( i ).getXCoor() - movedX, 2 )
                    + Math.pow( enemies.get( i ).getZCoor() - movedZ, 2 ) ) <= headRad
                    + enemies.get( i ).getRad()
                    && !invincible ) {
                
                distX = movedX - enemies.get( i ).getXCoor();
                distZ = movedZ - enemies.get( i ).getZCoor();
                if(distX < 0) {
                    rotatedAngle = 90f - (float) (Math.atan( distZ/ distX) * 180 / Math.PI);
                } else if(distX > 0) {
                    rotatedAngle = 270f - (float) (Math.atan( distZ / distX) * 180 / Math.PI);
                } else if(distZ > 0) {
                    rotatedAngle = 0f;
                } else {
                    rotatedAngle = 180f;
                }
                
                invincible = true;
                hitTime = System.currentTimeMillis();

                LkneeAngle = 0f;
                LstepAngle = 0f;
                RkneeAngle = 0f;
                RstepAngle = 0f;
                LarmAngle = 0f;
                LelbowAngle = 0f;
                RarmAngle = 0f;
                RelbowAngle = 0f;
                walking = false;
            }
        }
    }

    private static void moveBack() {
        movedX -= (float) Math.sin( rotatedAngle * Math.PI / 180 ) * moveSpeed
                / 5;
        movedZ -= (float) Math.cos( rotatedAngle * Math.PI / 180 ) * moveSpeed
                / 5;

        disappeared = !disappeared;

        if( System.currentTimeMillis() - hitTime > 1000 ) {
            invincible = false;
            disappeared = false;
        }
    }

    // Mouse and Keyboard Methods
    @Override
    public void mouseMoved( MouseEvent arg0 ) {
        // TODO Auto-generated method stub

    }

    @Override
    public void mouseClicked( MouseEvent arg0 ) {
        // TODO Auto-generated method stub

    }

    @Override
    public void mouseEntered( MouseEvent arg0 ) {
        // TODO Auto-generated method stub

    }

    @Override
    public void mouseExited( MouseEvent arg0 ) {
        // TODO Auto-generated method stub

    }

    public void mousePressed( MouseEvent e ) {
        MouseX = e.getX();
        MouseY = e.getY();
    }

    @Override
    public void mouseReleased( MouseEvent e ) {
        // TODO Auto-generated method stub

    }

    public void mouseDragged( MouseEvent e ) {
        int oldX = MouseX;
        int oldY = MouseY;
        MouseX = e.getX();
        MouseY = e.getY();
        cam.setRY( cam.getRY() + (MouseX - oldX) );
        cam.setRX( cam.getRX() + (MouseY - oldY) );

    }

    public void keyPressed( KeyEvent e ) {
        int keyCode = e.getKeyCode();

        if( keyCode == KeyEvent.VK_W ) {
            cam.moveForward();
        }
        if( keyCode == KeyEvent.VK_A ) {
            cam.moveLeft();
        }
        if( keyCode == KeyEvent.VK_S ) {
            cam.moveBack();
        }
        if( keyCode == KeyEvent.VK_D ) {
            cam.moveRight();
        }
        if( keyCode == KeyEvent.VK_R ) {
            cam.moveUp();
        }
        if( keyCode == KeyEvent.VK_F ) {
            cam.moveDown();
        }
        if( keyCode == KeyEvent.VK_UP && !invincible ) {
            walking = true;
            walkingDir = FORWARDS;
        }
        if( keyCode == KeyEvent.VK_LEFT && !invincible ) {
            rotatedAngle += rotateSpeed;
        }
        if( keyCode == KeyEvent.VK_RIGHT && !invincible ) {
            rotatedAngle -= rotateSpeed;
        }
        if( keyCode == KeyEvent.VK_DOWN && !invincible ) {
            walking = true;
            walkingDir = BACKWARDS;
        }
        
    }

    public void keyReleased( KeyEvent e ) {
        int keyCode = e.getKeyCode();

        if( keyCode == KeyEvent.VK_SPACE && !walking && !invincible ) {
            shooting = true;
            shootStartTime = System.currentTimeMillis();
            bullets.add( new Bullet( 0f, rotatedAngle, movedX, movedZ ) );
        }
        
        if( keyCode == KeyEvent.VK_C && !jumping && !invincible ) {
            jumping = true;
            if( walking ) {
                jumpingDir = walkingDir;
                walking = false;
                elbowSpeed = -Math.abs( elbowSpeed );
                kneeSpeed = -Math.abs( kneeSpeed );
                LstepAngle = 0.0f;
                RstepAngle = 0.0f;
                LkneeAngle = 0.0f;
                RkneeAngle = 0.0f;
                LarmAngle = 0.0f;
                RarmAngle = 0.0f;
                LelbowAngle = 0.0f;
                RelbowAngle = 0.0f;
            }
        }

    }

    @Override
    public void keyTyped( KeyEvent arg0 ) {
        // TODO Auto-generated method stub
    }
}
